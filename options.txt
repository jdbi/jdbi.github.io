JdbiConfig is the base interface for any configuration object within Jdbi. Configuration objects hold settings, register mappers and other objects that
control how Jdbi executes queries and maps results.

Config objects are registered with the ConfigRegistry. Every Jdbi and Handle object has its own ConfigRegistry object that bundle up all configuration.
Changing a setting or registering a class on the ConfigRegistry for a Jdbi object will cascade to any subsequently created handle. Changing a setting
on a handle will not affect the configuration for the Jdbi object.

This is a list of settings that are intended for configuration by Jdbi users. There are additional settings which either have no direct value to user
code (they are used internally) or for internal use (do not change).


# core settings

## Handles

- forceEndTransactions


## MapMappers

- caseChange (`UnaryOperator<String>`, typically org.jdbi.v3.core.mapper.CaseStrategy)

Defines the strategy for mapping the database column names to key names. Default is `LOCALE_LOWER` (lowercase the column names based on the current locale). Available strategies are:

- `NOP` - no name mapping at all
- `LOWER` -
- `UPPER` -
- `LOCALE_LOWER` -
- `LOCALE_UPPER` -

Custom strategies can be set by implementing `UnaryOperator<String>` with custom code.

This setting is used by map mappers.

## ReflectionMappers

- strictMatching

If `true`, all database columns must be mapped to a property. If any columns are unmatched or any property is unset, an exception is thrown. Defaults to `false`.

- caseChange (`UnaryOperator<String>`, typically org.jdbi.v3.core.mapper.CaseStrategy)

Defines the strategy for mapping the database column names to properties or fields. Default is `LOCALE_LOWER` (lowercase the column names based on the current locale). Available strategies are:

- `NOP` - no name mapping at all
- `LOWER` - lowercase column names using the `ROOT` locale
- `UPPER` - uppercase column names using the `ROOT` locale
- `LOCALE_LOWER` - lowercase column names using the current locale.
- `LOCALE_UPPER` - uppercase column names using the current locale.

Custom strategies can be set by implementing `UnaryOperator<String>` with custom code.

This setting is used by Bean/Pojo, Field, Constructor and the Kotlin mapper.


## ResultProducers

- allowNoResults

If `false`, Jdbi throws an exception if a query does not return a result set object (this is *different* from an empty result, e.g. no rows in a query). When setting this to `true`, Jdbi uses an empty result set instead. Default is `false`.

## SerializableTransactionRunner.Configuration

- maxRetries (int)

number of times a transaction is retried if the database reports a serialization error. Default is `5`.


- serializationFailureSqlState (string)

SQL state value from a `SQLException` that is considered a serialization failure. This is defined in the SQL:2011 standard as `40001` but can be different depending on the database. Default is `40001`.

- onFailure (Consumer<List<Exception>>)

Is called whenever a serialization failure occurs. Can be used e.g. for logging.

- onSuccess (Consumer<List<Exception>>)

Is called once a transaction successfully finishes with any exception that has happened during the transaction execution.


## SqlArrayTypes

- argumentStrategy (org.jdbi.v3.core.array.SqlArrayArgumentStrategy)

Sets the strategy on how to bind arrays in the database driver. The default is to use a SQL array.

- `SQL_ARRAY` - create a SQL array using `Connection#createArrayOf` and call `PreparedStatement#setArray`. This is the default and any modern JDBC driver should support it.
- `OBJECT_ARRAY` - call `PreparedStatement#setObject` and assume that the driver can handle this.


## SqlStatements

- templateEngine (org.jdbi.v3.core.statement.TemplateEngine)

The template engine to render SQL statements and substitute placeholders with values that have been defined on a statement (This is for *defined* attributes, not *bound* attributes!). The default engine does simple substitution of angle-bracket placeholders (`<name>`).

Jdbi currently provides the following engines:

jdbi core:

- `DefinedAttributeTemplateEngine` - the default engine, replaces angle-bracket placeholders (`<name>`).
- `NoTemplateEngine` - Ignore all defined values, do not do any substitutions.

jdbi commons-text:

- `StringSubstitutorTemplateEngine - using Apache commons-text `StringSubstitutor`

jdbi freemarker:

- `FreemarkerEngine` - using Apache Freemarker

jdbi stringtemplate 4:

- `StringTemplateEngine` - use antlr StringTemplate 4.

Custom implementations must implement `org.jdbi.v3.core.statement.TemplateEngine`.

- sqlParser (org.jdbi.v3.core.statement.SqlParser)

The parsed used to find the placeholders to bind arguments to. By default, colon-prefixed placeholders (`:name`) are used.

Jdbi currently provides the following parsers:

- `ColonPrefixSqlParser` - the default parser for `:name`.

- `HashPrefixSqlParser` - uses `#name` placeholders. There are situations where using the colon as name prefix may clash with the template engine used to render the SQL statement. An alternative to escaping all `:` values in a statement is to use this parser.

Custom implementations must implement `org.jdbi.v3.core.statement.SqlParser` and may extend `org.jdbi.v3.core.statement.CachingSqlParser` to benefit from caching.

- sqlLogger (org.jdbi.v3.core.statement.SqlLogger)

Controls logging around statement execution. A SqlLogger instance receives the statement context before and after query execution and the context and an exception in case of an execution problem. By default, nothing is logged.

Jdbi provides the following implementations:

- `Slf4JSqlLogger` - an implementation that uses `slf4j` as its logging backend
- `SqlLogger.NOP_SQL_LOGGER` - do not log any information

- queryTimeout

Sets the query timeout value in seconds. This value is used to call `Statement#setQueryTimeout`. The actual function depends on the JDBC driver.

- unusedBindingsAllowed

All bindings to a SQL operation must be used or an exception is thrown. If this setting is `true`, then unused bindings in a SQL operation are
ignored. Default is `false`.


- attachAllStatementsForCleanup

Jdbi supports automatic resource management by attaching statements to their handle so that closing the handle will free up all its resources.
If this setting is `true`, then statements are attached by default. Default value is `false`.

- attachCallbackStatementsForCleanup

Similar to `attachAllStatementsForCleanup` but for statements created in any of the `Jdbi` callback methods. Default value is `true`.


## StatementExceptions

- lengthLimit

Controls the maximum length for variable length strings when they are rendered using the `SHORT_STATEMENT` message rendering strategy. Default is 1024 characters.

- messageRendering (org.jdbi.v3.core.statement.StatementExceptions.MessageRendering)

Sets the message rendering strategy when fetching the message from a `StatementException` and its subclasses.
This is used to control how error messages from a Statement are displayed (e.g. for logging). The default is `SHORT_STATEMENT`.

- `NONE` - only render the statement exception message itself, do not add any information.
- `PARAMETERS` - include exception message and the bound parameters
- `SHORT_STATEMENT` - include exception message, SQL statement and the bound parameters. Truncate the SQL statement and the list of parameters each to the value of `lengthLimit`
- `DETAIL` - include exception message, unrendered SQL statement, rendered SQL statement, parsed SQL statement and binding parameters.


# Freemarker

## FreemarkerConfig

- freemarkerConfiguration (freemarker.template.Configuration)

Sets the freemarker configuration object for the template engine. See the freemarker documentation for details.

Default is a configuration object with

- `Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS`
- a class template loader that loads from the root of the class path.
- number format set to `computer`.

# Gson2

## Gson2Config

- gson (com.google.gson.Gson)

Sets the Gson object used to parse and render json text. Default is a default constructed object (using all Gson defaults).

# Jackson 2

## Jackson2Config

- mapper (com.fasterxml.jackson.databind.ObjectMapper)

Sets the object mapper instance used to parse and render json text. Default is a default constructed object (using all Jackson defaults).

- view

Sets a view (see `@JsonView`) for serialization and deserialization. Can be used to limit the values read and written by the `JacksonJsonMapper`. Default is no view.

- serializationView (Class<?>)

Sets a view (see `@JsonView`) for serialization. Can be used to limit the values written by the `JacksonJsonMapper`. Default is no view.

- deserializationView (Class<?>)

Sets a view (see `@JsonView`) for deserialization. Can be used to limit the values read by the `JacksonJsonMapper`. Default is no view.


# Json

## JsonConfig

- jsonMapper (org.jdbi.v3.json.JsonMapper)

Sets the JSON implementation used to serialize and deserialize json columns. Needs to be set when using the generic Json serialization/deserialization mapper. Default is the `UnimplementedJsonMapper` (needs to install one of `jdbi3-jackson2`, `jdbi3-gson2` or `jdbi3-moshi` or a custom mapper).

Jdbi provides three implementations:

- Jackson 2 (org.jdbi.v3.jackson2.JacksonJsonMapper) - use `Jackson 2.x`
- GSon 2 (org.jdbi.v3.gson2.GsonJsonMapper) - use Google `GSon 2`
- Moshi (org.jdbi.v3.moshi.MoshiJsonMapper) - use Square `Moshi`

or a custom implementation can be used.


# Moshi

## MoshiConfig

- moshi (com.squareup.moshi.Moshi)

Sets the Moshi instance used to parse and render json text. Default is a Moshi object constructed from a builder with default settings.

# StringTemplate

## StringTemplates

- failOnMissingAttribute

If `true`, fail rendering a template if a referenced attribute is missing. Default is `false`.



# core registries

## Arguments

- ArgumentFactory

Registers an argument factory with Jdbi. Argument Factories map Java types to placeholders in prepared statements.

- QualifiedArgumentFactory

Registers a qualified argument factory with Jdbi. Argument Factories map Java types to placeholders in prepared statements.

ColumnMappers                                 | core

- ColumnMapper

With the two argument variant (Type, GenericType, QualifiedType), a specific ColumnMapper is registered to map the given type. Whenever Jdbi needs
to match a column to a value that uses this type, the mapper instance is used.

The one argument variant uses inference to determine the type argument for the mapper and register the mapper with this type argument. The inference
mapper can be controlled using the inference interceptor chain.


- ColumnMapperFactory

- QualifiedColumnMapperFactory

Enums                                         | core
Extensions                                    | core
Handles                                       | core
MapEntryMappers                               | core
MapMappers                                    | core
ReflectionMappers                             | core
ResultProducers                               | core
SerializableTransactionRunner.Configuration   | core
SqlArrayTypes                                 | core
SqlStatements                                 | core
StatementExceptions                           | core
FreemarkerConfig                              | freemarker
Gson2Config                                   | gson2
Jackson2Config                                | jackson2
JsonConfig                                    | json
MoshiConfig                                   | moshi
PostgresTypes                                 | postgres
SqlObjects                                    | sqlobject
SqlObjectStatementConfiguration               | sqlobject
TimestampedConfig                             | sqlobject
StringTemplates                               | stringtemplate
TupleMappers                                  | vavr
JdbiCollectors                                | core
JdbiFreeBuilders                              | core
JdbiImmutables                                | core
Mappers                                       | core
OnDemandExtensions                            | core
PojoTypes                                     | core
Qualifiers                                    | core
RowMappers                                    | core
HandlerDecorators                             | sqlobject
Handlers                                      | sqlobject


Stuff to do:
Handles | register/unregister | HandleListener


Arguments | ArgumentFactory
Arguments | QualifiedArgumentsFactory
ColumnMappers | ColumnMapper
ColumnMappers | ColumnMapperFactory
ColumnMappers | QualifiedColumnMapperFactory
ColumnMappers | Type, ColumnMapper
ColumnMappers | GenericType, ColumnMapper
ColumnMappers | QualifiedType, ColumnMapper
Extensions | ExtensionFactory
Extensions | ExtensionHandlerFactory
Extensions | ExtensionHandlerCustomizer
Extensions | ConfigCustomizerFactory
